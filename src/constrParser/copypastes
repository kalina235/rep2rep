copy/pastes: 

import "constrParser.parserMeas";
import "constrParser.parserRuth";
import "constrParser.parserObject";
import "constrParser.parserSolar";


import "oruga.document";
import "constrParser.logicManage";
import "oruga.document";
Document.read "allrules";

logicManage.constructionToFormula rule6;

pdflatex rule2.tex; pdflatex rule3.tex;

parserMeas.stringIntoConstruction stri;

--------------------------------------

tSchema similarBinary:(measStickG,measStickG,interMeasPath) =
    source t:formula <- prefixBinRel[b:binRel, s1:?P:seg, s2:?P':seg] 
    target t':formula <- prefixBinRel[b':binRel, p1:?P:seg, p2:?P':seg]
    antecedent #:metaTrue <- sameAs[b:binRel,b':binRel],
               #:metaTrue <- sameAs[s1:?P:seg,p1':?P:seg],
               #:metaTrue <- sameAs[s2:?P':seg,p2':?P':seg]
    consequent :metaTrue <-close[t:formula,t':formula]
    strength 1000

tSchema similarTernary:(measStickG,measStickG,interMeasPath) =
    source t:formula <- prefixTerRel[tr:terRel, s1:?P:seg, s2:?P':seg, s3:?P'':seg] 
    target t':formula <- prefixTerRel[tr':terRel, p1:?P:seg, p2:?P':seg, p3:?P'':seg]
    antecedent #:metaTrue <- sameAs[tr:terRel,tr':terRel],
               #:metaTrue <- sameAs[s1:?P:seg,p1':?P:seg],
               #:metaTrue <- sameAs[s2:?P':seg,p2':?P':seg],
               #:metaTrue <- sameAs[s3:?P'':seg,p3':?P'':seg]
    consequent :metaTrue <-close[t:formula,t':formula]
    strength 1000

-----------------------
MEASSTICK:
val stri = "r1 V s1 V s2 L s1 s2 * S s2 s1 A  r2 V s1 V s2 V s3 E s1 s2 s3* C s3 s2 s1 A r3 V s1 V s2 ~ S s1 s2 > ~ L s2 s1 > s1 = s2 A r4 V s1 ~ L u1 s1 A r5 V s1 V s2  S s1 s2 > ~ S s2 s1 A r6 V s1 V s2 V  s3 E s1 s2 s3 > L s3 s2 & L s3 s1";

val stri = "r3 V s1 V s2 ~ S s1 s2 > ~ L s2 s1 > s1 = s2 A r4 V s1 ~ L u1 s1 A r5 V s1 V s2  S s1 s2 > ~ S s2 s1";

val rule1 = parserMeas.stringIntoConstruction "r1 V s1 V s2 L s1 s2 * S s2 s1";

val rule2 = parserMeas.stringIntoConstruction "r2 V s1 V s2 V s3 E s1 s2 s3* C s3 s2 s1";

val rule3 = parserMeas.stringIntoConstruction "r3 V s1 V s2 S s1 s2 v L s1 s2 v s1 = s2";

val rule4 = parserMeas.stringIntoConstruction "r4 V s1 ~ L u1 s1";

val rule5 = parserMeas.stringIntoConstruction "r5 V s1 V s2  S s1 s2 > ~ S s2 s1";

val rule6 = parserMeas.stringIntoConstruction "r6 V s1 V s2 V s3 E s1 s2 s3 > L s3 s2 & L s3 s1";

val rule6 = parserMeas.stringIntoConstruction "r6 V s1 V s2 V s3 E s1 s2 s3 > L s3 s2 & L s3 s1";

============================================================================
MOTIONPATH:
val rule1 = parserMotion.stringIntoConstruction "r1 V s1 V s2 F s1 s2 * C s2 s1";

val rule2 = parserMotion.stringIntoConstruction "r2 V s1 V s2 V s3 a s1 s2 s3* T s3 s2 s1";

val rule3 = parserMotion.stringIntoConstruction "r3 V s1 V s2 C s1 s2 v F s1 s2 v s1 = s2";

val rule4 = parserMotion.stringIntoConstruction "r4 V s1 ~ F u1 s1";

val rule5 = parserMotion.stringIntoConstruction "r5 V s1 V s2 C s1 s2 > ~C s2 s1";

val rule6 = parserMotion.stringIntoConstruction "r6 V s1 V s2 V s3 a s1 s2 s3 & ~ p1 = o1 > F s3 s2 & F s3 s1";

parserMotion.joinAnds [rule1, rule2, rule3, rule4, rule5, rule6];

parserMotion.stringIntoConstruction "r1 V p1 V p2 F p1 p2 * F p2 p1 A r2 V p1 V p2 V p3 a p1 p2 p3* T s3 s2 s1 A r3 V s1 V s2 ~ T s1 s2 > ~ F s2 s1 > s1 = s2 A r4 V s1 ~ F u1 s1 A r5 V s1 V s2 T s1 s2 > ~ T s2 s1 A r6 V p1 V p2 V p3 a p1 o1 p3 & ~ p2 = o1 > F p3 p2 & F p3 p1 A r7 V p1 V p3 a p1 o1 p3 > p1 = p3"

parserMotion.stringIntoConstruction "r7 V p1 V p3 a p1 o1 p3 > p1 = p3";

val all = parserMeas.stringIntoConstruction stri;

val stri = "r1 V s1 V s2 F s1 s2 * C s2 s1 A  r2 V s1 V s2 V s3 a s1 s2 s3* T s3 s2 s1 A r3 V s1 V s2 ~C s1 s2 > ~ F s2 s1 > s1 = s2 A r4 V s1 ~ F u1 s1 A r5 V s1 V s2 C s1 s2 > ~C s2 s1 A r6 V s1 V s2 V s3 a s1 s2 s3 & ~ p1 = o1 > F s3 s2 & F s3 s1 A r7 V p1 V p3 a p1 o1 p3 > p1 = p3";

bigConstruction = parserMotion.joinAnds 1 [rule1, rule2, rule3, rule4, rule5, rule6]

===================================================================================
OBJCONSTR:

r1 V o1 V o2 S o1 o2 * L o1 o2
tqntr111:formula <- logicApplyQuant[qr111:forall, or111:o1:whObj, tqntr1112:formula <- logicApplyQuant[qr1112:forall, or1112:o2:whObj, teqvr11113:formula <- logicInfixOp[tshrr111114:formula <- prefixBinRel[shr111114:smaller, or1111114:o1:whObj, or1111124:o2:whObj], eqvr11113:equiv, tlogr111124:formula <- prefixBinRel[lgr111124:larger, or1111214:o1:whObj, or1111224:o2:whObj]]]]
r2 V o1 V o2 V o3 C o1 o2 o3 * S o1 o2 o3
tqntr211:formula <- logicApplyQuant[qr211:forall, or211:o1:whObj, tqntr2112:formula <- logicApplyQuant[qr2112:forall, or2112:o2:whObj, tqntr21113:formula <- logicApplyQuant[qr21113:forall, or21113:o3:whObj, teqvr211114:formula <- logicInfixOp[tchpr2111115:formula <- prefixTerRel[chpr2111115:split, or21111115:o1:whObj, or21111125:o2:whObj, or21111135:o3:whObj], eqvr211114:equiv, tshrr2111125:formula <- prefixBinRel[shr2111125:smaller, or21111215:o1:whObj, or21111225:o2:whObj]]]]]
r3 V o1 V o2 S o1 o2 * L o1 o2
tqntr311:formula <- logicApplyQuant[qr311:forall, or311:o1:whObj, tqntr3112:formula <- logicApplyQuant[qr3112:forall, or3112:o2:whObj, teqvr31113:formula <- logicInfixOp[tshrr311114:formula <- prefixBinRel[shr311114:smaller, or3111114:o1:whObj, or3111124:o2:whObj], eqvr31113:equiv, tlogr311124:formula <- prefixBinRel[lgr311124:larger, or3111214:o1:whObj, or3111224:o2:whObj]]]]
r4 V o1 V o2 S o1 o2 > ~S o2 o1
tqntr411:formula <- logicApplyQuant[qr411:forall, or411:o1:whObj, tqntr4112:formula <- logicApplyQuant[qr4112:forall, or4112:o2:whObj, timpr41113:formula <- logicInfixOp[tshrr411114:formula <- prefixBinRel[shr411114:smaller, or4111114:o1:whObj, or4111124:o2:whObj], impr41113:implies, tnotr411124:formula <- logicApplyUnary[ntr411124:not, tshrr4111215:formula <- prefixBinRel[shr4111215:smaller, or41112115:o2:whObj, or41112125:o1:whObj]]]]]
r5 V o1 V o2 o3 C o1 o2 o3 > L o3 o2 ^ L o3 o1
tqntr511:formula <- logicApplyQuant[qr511:forall, or511:o1:whObj, tqntr5112:formula <- logicApplyQuant[qr5112:forall, or5112:o2:whObj, timpr51113:formula <- logicInfixOp[tchpr511114:formula <- prefixTerRel[chpr511114:split, or5111114:o1:whObj, or5111124:o2:whObj, or5111134:o3:whObj], impr51113:implies, tlogr511124:formula <- prefixBinRel[lgr511124:larger, or5111214:o3:whObj, or5111224:o2:whObj]]]]
r6 V o1 V o2 o3 M o1 o2 > H o1 o3 * C o1 o2 o3
r7 V o1 E o2 H o2 o1
r8 V o1 o2 S o1 o2 * L o1 o2
r9 V o1 V o2 V o3 V o4 M o1 o2 ^ M o2 o1 > S o1 o2 * S o3 o4

val stri = "r1 V o1 V o2 S o1 o2 * L o1 o2 A r2 V o1 V o2 V o3 C o1 o2 o3 * S o1 o2 o3 A r3 V o1 V o2 S o1 o2 * L o1 o2 A r4 V o1 V o2 S o1 o2 > ~S o2 o1 A r5 V o1 V o2 o3 C o1 o2 o3 > L o3 o2 ^ L o3 o1 A r6 V o1 V o2 o3 M o1 o2 > H o1 o3 * C o1 o2 o3 A r7 V o1 E o2 H o2 o1 A r8 V o1 o2 S o1 o2 * L o1 o2 A r9 V o1 V o2 V o3 V o4 M o1 o2 ^ M o2 o1 > S o1 o2 * S o3 o4"

parserObj.StringIntoConstruction stri

Construction.toString it;

parserObject.joinAnds

===================================================================================
RUTHATOM:

r1 M s1 > M p1
r2 M p1 > z1
r3 V t1 G p1 s1 t1 > z1
r4 V t1 D p1 s1 t1 > z1

r5 R p1 s1

val stri = "r1 M s1 > M p1 A r2 M p1 > z1 A r3 V t1 G p1 s1 t1 > z1 A r4 V t1 D p1 s1 t1 > z1"

parserRuth.stringIntoConstruction stri;
Construction.toString it;


===================================================================================
SOLARSYS:

r1 M n > M e
r2 M e > z1
r3 V t1 C e1 n1 t1 > z1
r4 V t1 D e1 n1 t1 > z1

r5 R e1 n1

val stri = "r1 N n > N e A r2 N e > z1 A r3 V t1 C e1 n1 t1 > z1 A r4 V t1 D e1 n1 t1 > z1"
parserSolar.stringIntoConstruction stri;
Construction.toString it;
===================================================================================
debug

val {conSpecsData, constructionsData, knowledge, strengths, transferRequests, typeSystemsData} = it;
val {conSpecN, constructions ,name} = r1
val [r15,r6,r5,r4,r3,r33,r2,r1] = constructionsData

parserMeas.joinAnds 1 [r1,r2,r3,r4,r5,r6];

val {conSpecN, construction, name} = r1;
val r1 = construction;


construction is really:

Construction.TCPair ({token = token, constructor = constructor}, cs)
  datatype construction = Construction.TCPair of {token : string * string,
                                     constructor : string * (string list * string)} 
                                    * construction list
                        | Construction.Source of string * string (ownname, generic)
                        | Reference of string * string (ownname, generic)
                        
---------------
tSchemas
