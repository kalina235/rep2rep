import measStick
import motionPath
import metaLogic

typeSystem interMeasPathT =
    imports measStick, motionPath, metaLogicT
    types
    order

conSpec interMeasPath:interMeasPathT =
    imports metaLogic
    constructors
        close :[formula, formula] -> metaBool, 
        closeBinRel :[binRel, binRel] -> metaBool, 
        closeTerRel :[terRel, terRel] -> metaBool,
        equalRel :[binRel, binRel] -> metaBool,
        closeOp :[binary, binary] -> metaBool,
        alike :[obj, obj] -> metaBool,
        analogy :[universal, universal] -> metaBool,
        asStrong :[formula, formula] -> metaBool,
        sameAs: [universal, universal] -> metaBool

tSchema similarTernary:(measStickG,motionPathG,interMeasPath) =
    source t:formula <- prefixTerRel[t0: terRel, s1:obj, s2:obj, s3:obj]
    target t':formula <- prefixTerRel[t0': terRel, p1':obj, p2':obj, p3':obj] 
    antecedent :metaTrue <-alike[s1:obj,p1':obj],
               :metaTrue <-alike[s2:obj,p2':obj],
               :metaTrue <-alike[s3:obj,p3':obj],
               :metaTrue <-closeTerRel[t0:terRel,t0':terRel]
    consequent :metaTrue <-close[t:formula,t':formula]
    strength 20

tSchema similarBinary:(measStickG,motionPathG,interMeasPath) =
    source t:formula <- prefixBinRel[b: binRel, s1: obj, s2: obj] 
    target t':formula <- prefixBinRel[b': binRel, p1: obj, p2: obj]
    antecedent :metaTrue <-alike[s1:obj,p1:obj],
               :metaTrue <-alike[s2:obj,p2':obj],
               :metaTrue <-closeBinRel[b:binRel,b':binRel]
    consequent :metaTrue <-close[t:formula,t':formula]
    strength 80

tSchema similarBinaryInfix:(measStickG,motionPathG,interMeasPath) =
    source t:formula <- infixBinRel[s1: obj, b: binRel, s2: obj] 
    target t':formula <- infixBinRel[p1: obj, b': binRel, p2: obj]
    antecedent :metaTrue <-alike[s1:obj,p1:obj],
               :metaTrue <-alike[s2:obj,p2':obj],
               :metaTrue <-closeBinRel[b:binRel,b':binRel]
    consequent :metaTrue <-close[t:formula,t':formula]
    strength 80

tSchema rewardAllign:(measStickG,motionPathG,interMeasPath) =
    source t:formula <- logicInfixOp[f1:formula,a:and,f2:formula]
    target t':formula <- logicInfixOp[f1':formula, a':and, f2':formula]
    antecedent :metaTrue <-close[f1:formula,f1':formula],
               :metaTrue <-close[f2:formula,f2':formula]
    consequent :metaTrue <-close[t:formula,t':formula]
    strength 200

tSchema comClose:(measStickG,motionPathG,interMeasPath) = 
    source f:formula 
    target f':formula 
    antecedent :metaTrue <-close[f:formula,f':formula]
    consequent :metaTrue <-close[f':formula, f:formula]
    strength 10

tSchema equivClose:(measStickG,motionPathG,interMeasPath) = #might not be needed, actually
    source t:formula <- logicInfixOp[f1:formula, e:equiv ,f2:formula]
    target t':formula <- logicInfixOp[f1':formula, e:equiv , f2':formula]
    antecedent :metaTrue <-close[f1:formula,f1':formula],
               :metaTrue <-close[f2:formula,f2':formula]
    consequent :metaTrue <-close[t:formula,t':formula]
    strength 20

tSchema infixClose:(measStickG,motionPathG,interMeasPath) = #ToDo decide on subtyping here
    source t:formula <- logicInfixOp[f1:formula, e:binary ,f2:formula]
    target t':formula <- logicInfixOp[f1':formula, e':binary , f2':formula]
    antecedent :metaTrue <-close[f1:formula,f1':formula],
               :metaTrue <-closeOp[e:binary,e':binary],
               :metaTrue <-close[f2:formula,f2':formula]
    consequent :metaTrue <-close[t:formula,t':formula]
    strength 20

tSchema forallDrop:(measStickG,motionPathG,interMeasPath) = 
    source t:formula <-logicApplyQuant[q:forall, s:obj, f:formula]
    target t':formula <-logicApplyQuant[q':forall, s':obj, f':formula]
    antecedent :metaTrue <-alike[s:obj,s':obj],
               :metaTrue <-close[f:formula,f':formula]
    consequent :metaTrue <-close[t:formula,t':formula]
    strength 50

tSchema similarTer:(measStickG,motionPathG,interMeasPath) =
    source t:extend
    target t':away
    antecedent :metaTrue <-analogy[t:away, t':extend] 
    consequent :metaTrue <-closeTerRel[t:extend, t':away]
    strength 1000

tSchema similarBin2:(measStickG,motionPathG,interMeasPath) =
    source t:longer
    target t':further
    antecedent :metaTrue <-analogy[t:longer, t':further]
    consequent :metaTrue <-closeBinRel[t:longer, t':further]
    strength 1000

tSchema similarBin:(measStickG,motionPathG,interMeasPath) =
    source t:shorter
    target t':closer 
    antecedent :metaTrue <-analogy[t:shorter, t':closer]
    consequent :metaTrue <-closeBinRel[t:shorter, t':closer]
    strength 1000

tSchema similarTer2:(measStickG,motionPathG,interMeasPath) =
    source t:chop
    target t':toward
    antecedent :metaTrue <-analogy[t:chop, t':toward]
    consequent :metaTrue <-closeTerRel[t:chop, t':toward]
    strength 1000

tSchema unifyLogic:(measStickG,measStickG,interMeasPath) = 
    source t:?P:binary
    target t':?P:binary
    antecedent 
    consequent :metaTrue <-sameAs[t:?P:binary,t':?P:binary]
    strength 100

tSchema forallExist:(measStickG,motionPathG,interMeasPath) = 
    source t:formula <- logicApplyQuant[q:forall, s:obj, f:formula]
    target t':formula <- logicApplyQuant[q':exists, s':obj, f':formula]
    antecedent :metaTrue <-asStrong[f:formula,f':formula]
    consequent :metaTrue <-asStrong[t:formula,t':formula]
    strength 20

tSchema dropLeft: (measStickG,motionPathG,interMeasPath) = 
    source t:formula <- logicInfixOp[f1:formula,a:and,f2:formula]
    target t':formula
    antecedent :metaTrue <-asStrong[f1:formula,t:formula]
    consequent :metaTrue <-asStrong[t:formula,t':formula]
    strength 10

tSchema dropRight: (measStickG,motionPathG,interMeasPath) = 
    source t:formula <- logicInfixOp[f1:formula,a:and,f2:formula]
    target t':formula
    antecedent :metaTrue <-asStrong[f2:formula,t':formula]
    consequent :metaTrue <-asStrong[t:formula,t':formula]
    strength 10

tSchema orToImplies:(measStickG,motionPathG,interMeasPath) = 
    source t:formula <- logicInfixOp[fnt:formula <- logicApplyUnary[n:not, f1:formula], o:or, f2:formula]
    target t':formula <- logicInfixOp[f1':formula, i:implies, f2':formula]
    antecedent :metaTrue <-asStrong[f1:formula,f1':formula],
               :metaTrue <-asStrong[f2:formula,f2':formula]
    consequent :metaTrue <-asStrong[t:formula,t':formula]
    strength 10

tSchema orSwap:(measStickG,motionPathG,interMeasPath) = 
    source t:formula <- logicInfixOp[f1:formula, o:or, f2:formula]
    target t':formula <- logicInfixOp[f2':formula, o':or, f1':formula]
    antecedent :metaTrue <-asStrong[f2:formula,f2':formula],
               :metaTrue <-asStrong[f1:formula,f1':formula]
    consequent :metaTrue <-asStrong[t:formula,t':formula]
    strength 0

tSchema andSwap:(measStickG,motionPathG,interMeasPath) = 
    source t:formula <- logicInfixOp[f1:formula, a:and, f2:formula]
    target t':formula <- logicInfixOp[f2':formula, a':and, f1':formula]
    antecedent :metaTrue <-asStrong[f2:formula,f2':formula],
               :metaTrue <-asStrong[f1:formula,f1':formula]
    consequent :metaTrue <-asStrong[t:formula,t':formula]
    strength -300

tSchema equivSwap:(measStickG,motionPathG,interMeasPath) = 
    source t:formula <- logicInfixOp[f1:formula, e:equiv, f2:formula]
    target t':formula <- logicInfixOp[f2':formula, e':equiv, f1':formula]
    antecedent :metaTrue <-asStrong[f2:formula,f2':formula],
               :metaTrue <-asStrong[f1:formula,f1':formula]
    consequent :metaTrue <-asStrong[t:formula,t':formula]
    strength -300
    
tSchema similarUnary:(measStickG,motionPathG,interMeasPath) =
    source t:formula <- logicApplyUnary[u: unary, f:formula] 
    target t':formula <-  logicApplyUnary[u': unary, f':formula] 
    antecedent :metaTrue <-close[f:formula,f':formula],
               :metaTrue <-closeOp[u:unary,u':unary]
    consequent :metaTrue <-close[t:formula,t':formula]
    strength 80
    


