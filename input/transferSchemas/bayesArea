import bayes
import areaDiagram
import metaLogic
import transferSchemas/arithArith

typeSystem interBayesAreaT =
    imports bayes, areaDiagram, metaLogicT, interArithArithT, interEventEventT
    types
    order

conSpec interBayesArea:interBayesAreaT =
    imports areaDiagramG, bayesG, interArithArith, interEventEvent
    constructors
        match : [events,tag] -> metaBool,
        encode : [probSys,area] -> metaBool,
        cMatch : [events,coloured] -> metaBool

tSchema eventV:(bayesG,areaDiagramG,interBayesArea) =
    source t:?v:event
    target t':?v:event
    antecedent
    consequent :metaTrue <- match[t:?v:event,t':?v:event]
    strength -1

tSchema eventMatchSame:(bayesG,areaDiagramG,interBayesArea) =
    source t:event <- makeEvent[t1:string]
    target t':event <- makeEvent[t1':string]
    antecedent :metaTrue <- sameStrings[t1:string,t1':string]
    consequent :metaTrue <- match[t:event,t':event]
    strength 1

tSchema notEvent:(bayesG,areaDiagramG,interBayesArea) =
    source t:event <- complement[t1:event]
    target t':tag <- reverseTag[t1':tag]
    antecedent :metaTrue <- match[t1:event,t1':tag]
    consequent :metaTrue <- match[t:event,t':tag]
    strength 1

tSchema constructEvent:(bayesG,areaDiagramG,interBayesArea) =
    source t:probEqn <- makeEqn[t1:events,t2:numExp]
    target t':area <- overlayRect[t1':empty,
                                  t2':rect <- cRect[t21':point <- cPoint[t211':0:real10,t212':0:real10],
                                                    t22':point <- cPoint[t221':numExp,t222':1:real10]],
                                  t3':tag,
                                  t4':pattern]
    antecedent :metaTrue <- match[t1:events,t3':tag],
               :metaTrue <- equal[t2:numExp,t221':numExp]
    consequent :metaTrue <- encode[t:probEqn,t':area]
    strength 1

tSchema constructCond:(bayesG,areaDiagramG,interBayesArea) =
    source t:probEqn <- makeEqn[t1:condEvent <- makeCond[t11:event,t12:event],
                                t2:numExp]
    target t':area <- overlayRect[t1':area <- overlayRect[t11':empty,
                                                          t12':rect<- cRect[t121':point <- cPoint[t1211':0:real10,t1212':0:real10],
                                                                            t122':point <- cPoint[t1221':x:var,t1222':1:real10]],
                                                          t13':tag,
                                                          t14':blue],
                                  t2':rect <- cRect[t21':point <- cPoint[t211':0:real10,t212':0:real10],
                                                    t22':point <- cPoint[t1221':x:var,t222':numExp]],
                                  t3':tag,
                                  t4':pattern]
    antecedent :metaTrue <- match[t11:event,t3':tag],
               :metaTrue <- match[t12:event,t13':tag],
               :metaTrue <- equal[t2:numExp,t222':numExp]
    consequent :metaTrue <- encode[t:probEqn,t':area]
    strength 8

tSchema constructInter:(bayesG,areaDiagramG,interBayesArea) =
    source t:probEqn <- makeEqn[t1:event <- infix[t11:event,t12:inter,t13:event],
                                t2:numExp]
    target t':area <- overlayRect[t1':area <- overlayRect[t11':empty,
                                                          t12':rect<- cRect[t121':point <- cPoint[t1211':0:real10,t1212':0:real10],
                                                                            t122':point <- cPoint[t1221':y:var,t1222':1:real10]],
                                                          t13':tag,
                                                          t14':white],
                                  t2':rect <- cRect[t21':point <- cPoint[t211':0:real10,t212':0:real10],
                                                    t22':point <- cPoint[t1221':y:var,
                                                                         t222':numExp <- infixOp[t2221':numExp,t2222':div,t1221':y:var]]],
                                  t3':tag,
                                  t4':pattern]
    antecedent :metaTrue <- match[t11:event,t13':tag],
               :metaTrue <- match[t13:event,t3':tag],
               :metaTrue <- equal[t2:numExp,t2221':numExp]
    consequent :metaTrue <- encode[t:probEqn,t':area]
    strength 4

tSchema combineEqn:(bayesG,areaDiagramG,interBayesArea) =
    source t:probSys <- addEqn[t1:probEqn,t2:probSys]
    target t':area <- combine[t1':area,t2':area]
    antecedent :metaTrue <- encode[t1:probEqn,t1':area],
               :metaTrue <- encode[t2:probSys,t2':area]
    consequent :metaTrue <- encode[t:probSys,t':area]
    strength 1

tSchema colourV:(bayesG,areaDiagramG,interBayesArea) =
    source t:event
    target t':coloured <- colour[t1':empty,t2':tag,t3':green]
    antecedent :metaTrue <- match[t:event,t2':tag]
    consequent :metaTrue <- cMatch[t:event,t':coloured]
    strength 1

tSchema colourNot:(bayesG,areaDiagramG,interBayesArea) =
    source t:event <- complement[t2:event]
    target t':coloured <- colour[t1':empty,
                                 t2':tag <- reverseTag[t21':tag],
                                 t3':green]
    antecedent :metaTrue <- match[t2:event,t21':tag]
    consequent :metaTrue <- cMatch[t:event,t':coloured]
    strength 1

tSchema colourCond:(bayesG,areaDiagramG,interBayesArea) =
    source t:condEvent <- makeCond[t1:event,t3:event]
    target t':coloured <- colour[t1':coloured,t2':tag,t3':pattern]
    antecedent :metaTrue <- cMatch[t3:event,t1':coloured],
               :metaTrue <- match[t1:event,t2':tag]
    consequent :metaTrue <- cMatch[t:condEvent,t':coloured]
    strength 4

tSchema colourInter:(bayesG,areaDiagramG,interBayesArea) =
    source t:event <- infix[t1:event,t2:inter,t3:event]
    target t':coloured <- colour[t1':coloured <- colour[t11':empty,t12':tag,t13':white],
                                 t2':tag,
                                 t3':green]
    antecedent :metaTrue <- match[t1:event,t12':tag],
               :metaTrue <- match[t3:event,t2':tag]
    consequent :metaTrue <- cMatch[t:event,t':coloured]
    strength 1

tSchema colourArea:(bayesG,areaDiagramG,interBayesArea) =
    source t:probSys <- calculate[t1:probSys,t2:events]
    target t':area <- addColour[t1':area, t2':coloured]
    antecedent :metaTrue <- encode[t1:probSys,t1':area],
               :metaTrue <- cMatch[t2:events,t2':coloured]
    consequent :metaTrue <- encode[t:probSys,t':area]
    strength 1
