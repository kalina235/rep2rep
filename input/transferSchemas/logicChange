import measStick
import measStick
#add all other importys
import metaLogic

typeSystem interLogicT =
    imports measStick, metaLogicT #add here too
    types
    order

conSpec interLogic:interLogicT =
imports metaLogic
constructors
    close :[formula, formula] -> metaBool,
    newrel: [formula, formula] -> metaBool,
    sameAs: [universal, universal] -> metaBool


tSchema negNotClose:(measStickG,measStickG,interLogic) = #ask Daniel here
    source t:formula
    target t':formula <- logicApplyUnary[n:not, f:formula]
    antecedent :metaTrue <-close[t:formula,f:formula]
    consequent :metaFalse <-close[t:formula,t':formula]
    strength 10

#double negation is void
tSchema doubleNeg:(measStickG,measStickG,interLogic) = #double neg is void #this is blisfullly wrong
    source t:formula
    target t':formula <- logicApplyUnary[n1:not, f1:formula <-logicApplyUnary[n2:not, f2:formula]]
    antecedent : metaTrue <-close[t:formula,f2:formula]
    consequent : metaTrue <-close[t:formula,t':formula]
    strength -1

#weaken
tSchema forallExist:(measStickG,measStickG,interLogic) = 
    source t:formula <- logicApplyQuant[q:forall, s:?P:seg, f:formula]
    target t':formula <- logicApplyQuant[q':exists, s':?P:seg, f':formula]
    antecedent :metaTrue <-close[f:formula,f':formula]
    consequent :metaTrue <-close[t:formula,t':formula]
    strength 1

tSchema similarBinary:(measStickG,measStickG,interLogic) =
    source t:formula <- prefixBinRel[b: ?P:binRel, s1:seg, s2: obj] 
    target t':formula <- prefixBinRel[b': ?P:binRel, p1:seg, p2:seg]
    antecedent 
    consequent :metaTrue <-close[t:formula,t':formula]
    strength 80

tSchema unifyLogic:(measStickG,measStickG,interLogic) = 
    source t:?P:binary
    target t':?P:binary
    antecedent 
    consequent :metaTrue <-sameAs[t:?P:binary,t':?P:binary]
    strength 100

tSchema unifybinRel:(measStickG,measStickG,interLogic) =
    source t:?P:binRel
    target t':?P:binRel
    antecedent 
    consequent :metaTrue <-sameAs[t:?P:binRel,t':?P:binRel]
    strength 100

tSchema unifyTerRel:(measStickG,measStickG,interLogic) =
    source t:?P:terRel
    target t':?P:terRel
    antecedent 
    consequent :metaTrue <-sameAs[t:?P:terRel,t':?P:terRel]
    strength 100

#ask Daniel
tSchema unifyObj:(measStickG,measStickG,interLogic) =
    source t:?P:obj
    target t':?P:obj
    antecedent
    consequent :metaTrue <-sameAs[t:?P:obj,t':?P:obj]
    strength 100


#THIS IS the spicy part
tSchema dropARule: (measStickG,measStickG,interLogic) = 
    source t:formula <- logicInfixOp[f1:formula,a:and,f2:formula]
    target t':formula <- logicInfixOp[f1':formula,a':and, f2':formula] 
    antecedent :metaTrue <-close[f1:formula,f1':formula]
    consequent :metaTrue <-close[t:formula,t':formula]
    strength 100


#help transfer
tSchema equivClose:(measStickG,measStickG,interLogic) = #might not be needed, actually
    source t:formula <- logicInfixOp[f1:formula, e:equiv ,f2:formula]
    target t':formula <- logicInfixOp[f1':formula, e:equiv , f2':formula]
    antecedent :metaTrue <-close[f1:formula,f1':formula],
               :metaTrue <-close[f2:formula,f2':formula]
    consequent :metaTrue <-close[t:formula,t':formula]
    strength 20

tSchema infixClose:(measStickG,measStickG,interLogic) = #ToDo decide on subtyping here
    source t:formula <- logicInfixOp[f1:formula, e:binary, f2:formula]
    target t':formula <- logicInfixOp[f1':formula, e:binary , f2':formula]
    antecedent :metaTrue <-close[f2:formula,f2':formula]
    consequent :metaTrue <-close[t:formula,t':formula]
    strength 20
    
#tSchema eqlIsClose:(measStickG,measStickG,interLogic) =
#    source t:binRel
#    target t':binRel
#    antecedent :metaTrue <-equalRel[t:binRel,t':binRel]
#    consequent :metaTrue <-closeBinRel[t:binRel,t':binRel]
#    strength 20

tSchema forallDrop:(measStickG,measStickG,interLogic) = 
    source t:formula <- logicApplyQuant[q:forall, s:obj, f:formula]
    target t':formula <- logicApplyQuant[q':forall, s':obj, f':formula]
    antecedent :metaTrue <-close[f:formula,f':formula]
    consequent :metaTrue <-close[t:formula,t':formula]
    strength 50