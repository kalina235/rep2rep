import motionPath
import objectConstr
import metaLogic

typeSystem interPathObj =
    imports motionPath, objectConstr, metaLogicT
    types
    order

conSpec interPathObj:interPathObj =
    imports metaLogic
    constructors
        close :[formula, formula] -> metaBool,
        closeBinRel :[binRel, binRel] -> metaBool,
        closeTerRel :[terRel, terRel] -> metaBool,
        equalRel :[binRel, binRel] -> metaBool,
        closeOp :[binary, binary] -> metaBool,
        alike :[obj, obj] -> metaBool,
        analogy :[universal, universal] -> metaBool,
        asStrong :[formula, formula] -> metaBool,
        sameAs: [universal, universal] -> metaBool

#=================================
#REFLEXIVE TSCHEMAS:
#=================================
tSchema similarTernary:(motionPathG,objectConstrG,interPathObj) =
    source t:formula <- prefixTerRel[t: terRel, s1:obj, s2:obj, s3:obj]
    target t':formula <- prefixTerRel[t': terRel, p1:obj, p2:obj, p3:obj] 
    antecedent :metaTrue <-alike[s1:obj,p1:obj],
               :metaTrue <-alike[s2:obj,p2:obj],
               :metaTrue <-alike[s3:obj,p3:obj],
               :metaTrue <-closeTerRel[t:terRel,t':terRel]
    consequent :metaTrue <-close[t:formula,t':formula]
    strength 20

tSchema similarBinary:(motionPathG,objectConstrG,interPathObj) =
    source t:formula <- prefixBinRel[b: binRel, s1: obj, s2: obj] 
    target t':formula <- prefixBinRel[b': binRel, p1: obj, p2: obj]
    antecedent :metaTrue <-alike[s1:obj,p1:obj],
               :metaTrue <-alike[s2:obj,p2:obj],
               :metaTrue <-closeBinRel[b:binRel,b':binRel]
    consequent :metaTrue <-close[t:formula,t':formula]
    strength 80

tSchema similarBinaryInfix:(motionPathG,objectConstrG,interPathObj) =
    source t:formula <- infixBinRel[s1: obj, b: binRel, s2: obj] 
    target t':formula <- infixBinRel[p1: obj, b': binRel, p2: obj]
    antecedent :metaTrue <-alike[s1:obj,p1:obj],
               :metaTrue <-alike[s2:obj,p2:obj],
               :metaTrue <-closeBinRel[b:binRel,b':binRel]
    consequent :metaTrue <-close[t:formula,t':formula]
    strength 80

tSchema rewardAllign:(motionPathG,objectConstrG,interPathObj) =
    source t:formula <- logicInfixOp[f1:formula,a:and,f2:formula]
    target t':formula <- logicInfixOp[f1':formula, a':and, f2':formula]
    antecedent :metaTrue <-close[f1:formula,f1':formula],
               :metaTrue <-close[f2:formula,f2':formula]
    consequent :metaTrue <-close[t:formula,t':formula]
    strength 200

tSchema comClose:(motionPathG,objectConstrG,interPathObj) = 
    source f:formula 
    target f':formula 
    antecedent :metaTrue <-close[f:formula,f':formula]
    consequent :metaTrue <-close[f':formula, f:formula]
    strength 10

tSchema equivClose:(motionPathG,objectConstrG,interPathObj) = #might not be needed, actually
    source t:formula <- logicInfixOp[f1:formula, e:equiv ,f2:formula]
    target t':formula <- logicInfixOp[f1':formula, e:equiv , f2':formula]
    antecedent :metaTrue <-close[f1:formula,f1':formula],
               :metaTrue <-close[f2:formula,f2':formula]
    consequent :metaTrue <-close[t:formula,t':formula]
    strength 20

tSchema infixClose:(motionPathG,objectConstrG,interPathObj) = #ToDo decide on subtyping here
    source t:formula <- logicInfixOp[f1:formula, e:binary ,f2:formula]
    target t':formula <- logicInfixOp[f1':formula, e':binary , f2':formula]
    antecedent :metaTrue <-close[f1:formula,f1':formula],
               :metaTrue <-closeOp[e:binary,e':binary],
               :metaTrue <-close[f2:formula,f2':formula]
    consequent :metaTrue <-close[t:formula,t':formula]
    strength 20

tSchema forallDrop:(motionPathG,objectConstrG,interPathObj) = 
    source t:formula <-logicApplyQuant[q:forall, s:obj, f:formula]
    target t':formula <-logicApplyQuant[q':forall, s':obj, f':formula]
    antecedent :metaTrue <-alike[s:obj,s':obj],
               :metaTrue <-close[f:formula,f':formula]
    consequent :metaTrue <-close[t:formula,t':formula]
    strength 50

tSchema similarUnary:(motionPathG,objectConstrG,interPathObj) =
    source t:formula <- logicApplyUnary[u: unary, f:formula] 
    target t':formula <-  logicApplyUnary[u': unary, f':formula] 
    antecedent :metaTrue <-close[f:formula,f':formula],
               :metaTrue <-sameAs[u:unary,u':unary]
    consequent :metaTrue <-close[t:formula,t':formula]
    strength 80
    
#============================================
#SEMANTIC TSCHEMAS (generate by runninh findPairs.py)
#============================================