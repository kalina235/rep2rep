import transferSchemas/measPath
import transferSchemas/measObj
import transferSchemas/pathObj
import transferSchemas/ruthSolar
import measStick
import objectConstr
import motionPath
import ruthAtom
import solarSystem

construction ruleAllM:motionPathG = rA:f1:formula  <- logicInfixOp[tqntr111:formula <- logicApplyQuant[qr111:forall, pr111:p1:point, tqntr1112:formula <- logicApplyQuant[qr1112:forall, pr1112:s2:point, teqvr11113:formula <- logicInfixOp[tfrtr111114:formula <- prefixBinRel[frr111114:further, pr1111114:p1:point, pr1111124:p2:point], eqvr11113:equiv, tclrr111124:formula <- prefixBinRel[clr111124:closer, pr1111214:p2:point, pr1111224:p1:point]]]], A1:and, rule2andrest:formula <- logicInfixOp[tqntr211:formula <- logicApplyQuant[qr211:forall, pr211:p1:point, tqntr2112:formula <- logicApplyQuant[qr2112:forall, pr2112:p2:point, tqntr21113:formula <- logicApplyQuant[qr21113:forall, pr21113:p3:point, teqvr211114:formula <- logicInfixOp[tawyr2111115:formula <- prefixTerRel[awyr2111115:away, pr21111115:p1:point, pr21111125:p2:point, pr21111135:p3:point], eqvr211114:equiv, ttowr2111125:formula <- prefixTerRel[towr2111125:approach, pr21111215:p3:point, pr21111225:p2:point, pr21111235:p1:point]]]]], A2:and, rule3andrest:formula <- logicInfixOp[tqntr311:formula <- logicApplyQuant[qr311:forall, pr311:p1:point, tqntr3112:formula <- logicApplyQuant[qr3112:forall, pr3112:p2:point, torr31113:formula <- logicInfixOp[tclrr311114:formula <- prefixBinRel[clr311114:closer, pr3111114:p1:point, pr3111124:p2:point], oorr31113:or, torr311124:formula <- logicInfixOp[tfrtr3111215:formula <- prefixBinRel[frr3111215:further, pr31112115:p1:point, pr31112125:p2:point], oorr311124:or, teqr3111225:formula <- infixBinRel[CPsr31112216:p1:point, eqsr3111225:equals, CPsr31112226:p2:point]]]]], A3:and, rule4andrest:formula <- logicInfixOp[tqntr411:formula <- logicApplyQuant[qr411:forall, pr411:p1:point, tnotr4112:formula <- logicApplyUnary[ntr4112:not, tfrtr41113:formula <- prefixBinRel[frr41113:further, opr411113:origin, pr411123:p1:point]]], A4:and, rule5andrest:formula <- logicInfixOp[tqntr511:formula <- logicApplyQuant[qr511:forall, pr511:p1:point, tqntr5112:formula <- logicApplyQuant[qr5112:forall, pr5112:p2:point, timpr51113:formula <- logicInfixOp[tclrr511114:formula <- prefixBinRel[clr511114:closer, pr5111114:p1:point, pr5111124:p2:point], impr51113:implies, tnotr511124:formula <- logicApplyUnary[ntr511124:not, tclrr5111215:formula <- prefixBinRel[clr5111215:closer, pr51112115:p2:point, pr51112125:p1:point]]]]], A5:and, tqntr611:formula <- logicApplyQuant[qr611:forall, pr611:p1:point, tqntr6112:formula <- logicApplyQuant[qr6112:forall, pr6112:p2:point, tqntr61113:formula <- logicApplyQuant[qr61113:forall, pr61113:p3:point, timpr611114:formula <- logicInfixOp[tandr6111115:formula <- logicInfixOp[tawyr61111116:formula <- prefixTerRel[awyr61111116:away, pr611111116:p1:point, pr611111126:p2:point, pr611111136:p3:point], andr6111115:and, tnotr61111126:formula <- logicApplyUnary[ntr61111126:not, teqr611111217:formula <- infixBinRel[CPsr6111112118:p1:point, eqsr611111217:equals, oCPsr6111112128:origin]]], impr611114:implies, tandr6111125:formula <- logicInfixOp[tfrtr61111216:formula <- prefixBinRel[frr61111216:further, pr611112116:s3:point, pr611112126:s2:point], andr6111125:and, tfrtr61111226:formula <- prefixBinRel[frr61111226:further, pr611112216:s3:point, pr611112226:s1:point]]]]]]]]]]]

construction rule1M:motionPathG = tqntr111:formula <- logicApplyQuant[qr111:forall, pr111:p1:point, tqntr1112:formula <- logicApplyQuant[qr1112:forall, pr1112:s2:point, teqvr11113:formula <- logicInfixOp[tfrtr111114:formula <- prefixBinRel[frr111114:further, pr1111114:p1:point, pr1111124:p2:point], eqvr11113:equiv, tclrr111124:formula <- prefixBinRel[clr111124:closer, pr1111214:p2:point, pr1111224:p1:point]]]]

construction rule2M:motionPathG = tqntr211:formula <- logicApplyQuant[qr211:forall, pr211:p1:point, tqntr2112:formula <- logicApplyQuant[qr2112:forall, pr2112:p2:point, tqntr21113:formula <- logicApplyQuant[qr21113:forall, pr21113:p3:point, teqvr211114:formula <- logicInfixOp[tawyr2111115:formula <- prefixTerRel[awyr2111115:away, pr21111115:p1:point, pr21111125:p2:point, pr21111135:p3:point], eqvr211114:equiv, ttowr2111125:formula <- prefixTerRel[towr2111125:approach, pr21111215:p3:point, pr21111225:p2:point, pr21111235:p1:point]]]]]

construction rule3M:motionPathG = tqntr311:formula <- logicApplyQuant[qr311:forall, pr311:p1:point, tqntr3112:formula <- logicApplyQuant[qr3112:forall, pr3112:p2:point, torr31113:formula <- logicInfixOp[tclrr311114:formula <- prefixBinRel[clr311114:closer, pr3111114:p1:point, pr3111124:p2:point], or31113:or, torr311124:formula <- logicInfixOp[tfrtr3111215:formula <- prefixBinRel[frr3111215:further, pr31112115:p1:point, pr31112125:p2:point], or311124:or, teqr3111225:formula <- infixBinRel[CPsr31112216:p1:point, eqsr3111225:equals, CPsr31112226:p2:point]]]]]

construction rule4M:motionPathG = tqntr411:formula <- logicApplyQuant[qr411:forall, pr411:p1:point, tnotr4112:formula <- logicApplyUnary[ntr4112:not, tfrtr41113:formula <- prefixBinRel[frr41113:further, opr411113:origin, pr411123:p1:point]]]

construction rule5M:motionPathG = tqntr511:formula <- logicApplyQuant[qr511:forall, pr511:p1:point, tqntr5112:formula <- logicApplyQuant[qr5112:forall, pr5112:p2:point, timpr51113:formula <- logicInfixOp[tclrr511114:formula <- prefixBinRel[clr511114:closer, pr5111114:p1:point, pr5111124:p2:point], impr51113:implies, tnotr511124:formula <- logicApplyUnary[ntr511124:not, tclrr5111215:formula <- prefixBinRel[clr5111215:closer, pr51112115:p2:point, pr51112125:p1:point]]]]]

construction rule6M:motionPathG = tqntr611:formula <- logicApplyQuant[qr611:forall, pr611:p1:point, tqntr6112:formula <- logicApplyQuant[qr6112:forall, pr6112:p2:point, tqntr61113:formula <- logicApplyQuant[qr61113:forall, pr61113:p3:point, timpr611114:formula <- logicInfixOp[tandr6111115:formula <- logicInfixOp[tawyr61111116:formula <- prefixTerRel[awyr61111116:away, pr611111116:p1:point, pr611111126:p2:point, pr611111136:p3:point], andr6111115:and, tnotr61111126:formula <- logicApplyUnary[ntr61111126:not, teqr611111217:formula <- infixBinRel[CPsr6111112118:p1:point, eqsr611111217:equals, oCPsr6111112128:origin]]], impr611114:implies, tandr6111125:formula <- logicInfixOp[tfrtr61111216:formula <- prefixBinRel[frr61111216:further, pr611112116:s3:point, pr611112126:s2:point], andr6111125:and, tfrtr61111226:formula <- prefixBinRel[frr61111226:further, pr611112216:s3:point, pr611112226:s1:point]]]]]]

construction rule7M:motionPathG = tqntr711:formula <- logicApplyQuant[qr711:forall, pr711:p1:point, tqntr7112:formula <- logicApplyQuant[qr7112:forall, pr7112:p3:point, timpr71113:formula <- logicInfixOp[tawyr711114:formula <- prefixTerRel[awyr711114:away, pr7111114:p1:point, opr7111124:origin, pr7111134:p3:point], impr71113:implies, teqr711124:formula <- infixBinRel[CPsr7111215:p1:point, eqsr711124:equals, CPsr7111225:p3:point]]]]
#============

transfer
    sourceConstruction rule3M
    targetConSpec motionPathG
    interConSpec interPathObj
    goal :metaTrue <- close[tqntr311:formula, t':formula]
    output motionRule3
    limit 100
    matchTarget ttarget:formula <- logicInfixOp[tqntr111:formula <- logicApplyQuant[qr111:forall, pr111:p1:point, tqntr1112:formula <- logicApplyQuant[qr1112:forall, pr1112:s2:point, teqvr11113:formula <- logicInfixOp[tfrtr111114:formula <- prefixBinRel[frr111114:further, pr1111114:p1:point, pr1111124:p2:point], eqvr11113:equiv, tclrr111124:formula <- prefixBinRel[clr111124:closer, pr1111214:p2:point, pr1111224:p1:point]]]], A1:and, rule2andrest:formula <- logicInfixOp[tqntr211:formula <- logicApplyQuant[qr211:forall, pr211:p1:point, tqntr2112:formula <- logicApplyQuant[qr2112:forall, pr2112:p2:point, tqntr21113:formula <- logicApplyQuant[qr21113:forall, pr21113:p3:point, teqvr211114:formula <- logicInfixOp[tawyr2111115:formula <- prefixTerRel[awyr2111115:away, pr21111115:p1:point, pr21111125:p2:point, pr21111135:p3:point], eqvr211114:equiv, ttowr2111125:formula <- prefixTerRel[towr2111125:approach, pr21111215:p3:point, pr21111225:p2:point, pr21111235:p1:point]]]]], A2:and, rule3andrest:formula <- logicInfixOp[tqntr311:formula <- logicApplyQuant[qr311:forall, pr311:p1:point, tqntr3112:formula <- logicApplyQuant[qr3112:forall, pr3112:p2:point, torr31113:formula <- logicInfixOp[tclrr311114:formula <- prefixBinRel[clr311114:closer, pr3111114:p1:point, pr3111124:p2:point], oorr31113:origin, torr311124:formula <- logicInfixOp[tfrtr3111215:formula <- prefixBinRel[frr3111215:further, pr31112115:p1:point, pr31112125:p2:point], oorr311124:origin, teqr3111225:formula <- infixBinRel[CPsr31112216:p1:point, eqsr3111225:equals, CPsr31112226:p2:point]]]]], A3:and, rule4andrest:formula <- logicInfixOp[tqntr411:formula <- logicApplyQuant[qr411:forall, pr411:p1:point, tnotr4112:formula <- logicApplyUnary[ntr4112:not, tfrtr41113:formula <- prefixBinRel[frr41113:further, opr411113:origin, pr411123:p1:point]]], A4:and, rule5andrest:formula <- logicInfixOp[tqntr511:formula <- logicApplyQuant[qr511:forall, pr511:p1:point, tqntr5112:formula <- logicApplyQuant[qr5112:forall, pr5112:p2:point, timpr51113:formula <- logicInfixOp[tclrr511114:formula <- prefixBinRel[clr511114:closer, pr5111114:p1:point, pr5111124:p2:point], impr51113:implies, tnotr511124:formula <- logicApplyUnary[ntr511124:not, tclrr5111215:formula <- prefixBinRel[clr5111215:closer, pr51112115:p2:point, pr51112125:p1:point]]]]], A5:and, tqntr611:formula <- logicApplyQuant[qr611:forall, pr611:p1:point, tqntr6112:formula <- logicApplyQuant[qr6112:forall, pr6112:p2:point, tqntr61113:formula <- logicApplyQuant[qr61113:forall, pr61113:p3:point, timpr611114:formula <- logicInfixOp[tandr6111115:formula <- logicInfixOp[tawyr61111116:formula <- prefixTerRel[awyr61111116:away, pr611111116:p1:point, pr611111126:p2:point, pr611111136:p3:point], andr6111115:and, tnotr61111126:formula <- logicApplyUnary[ntr61111126:not, teqr611111217:formula <- infixBinRel[CPsr6111112118:p1:point, eqsr611111217:equals, oCPsr6111112128:origin]]], impr611114:implies, tandr6111125:formula <- logicInfixOp[tfrtr61111216:formula <- prefixBinRel[frr61111216:further, pr611112116:s3:point, pr611112126:s2:point], andr6111125:and, tfrtr61111226:formula <- prefixBinRel[frr61111226:further, pr611112216:s3:point, pr611112226:s1:point]]]]]]]]]]]

transfer
    sourceConstruction ruleAllM
    targetConSpec motionPathG
    interConSpec interPathObj
    goal :metaTrue <- close[rA:f1:formula, t':formula]
    output motionTest1
    limit 100
    matchTarget ttarget:formula <- logicInfixOp[tqntr111:formula <- logicApplyQuant[qr111:forall, pr111:p1:point, tqntr1112:formula <- logicApplyQuant[qr1112:forall, pr1112:s2:point, teqvr11113:formula <- logicInfixOp[tfrtr111114:formula <- prefixBinRel[frr111114:further, pr1111114:p1:point, pr1111124:p2:point], eqvr11113:equiv, tclrr111124:formula <- prefixBinRel[clr111124:closer, pr1111214:p2:point, pr1111224:p1:point]]]], A1:and, rule2andrest:formula <- logicInfixOp[tqntr211:formula <- logicApplyQuant[qr211:forall, pr211:p1:point, tqntr2112:formula <- logicApplyQuant[qr2112:forall, pr2112:p2:point, tqntr21113:formula <- logicApplyQuant[qr21113:forall, pr21113:p3:point, teqvr211114:formula <- logicInfixOp[tawyr2111115:formula <- prefixTerRel[awyr2111115:away, pr21111115:p1:point, pr21111125:p2:point, pr21111135:p3:point], eqvr211114:equiv, ttowr2111125:formula <- prefixTerRel[towr2111125:approach, pr21111215:p3:point, pr21111225:p2:point, pr21111235:p1:point]]]]], A2:and, rule3andrest:formula <- logicInfixOp[tqntr311:formula <- logicApplyQuant[qr311:forall, pr311:p1:point, tqntr3112:formula <- logicApplyQuant[qr3112:forall, pr3112:p2:point, torr31113:formula <- logicInfixOp[tclrr311114:formula <- prefixBinRel[clr311114:closer, pr3111114:p1:point, pr3111124:p2:point], oorr31113:origin, torr311124:formula <- logicInfixOp[tfrtr3111215:formula <- prefixBinRel[frr3111215:further, pr31112115:p1:point, pr31112125:p2:point], oorr311124:origin, teqr3111225:formula <- infixBinRel[CPsr31112216:p1:point, eqsr3111225:equals, CPsr31112226:p2:point]]]]], A3:and, rule4andrest:formula <- logicInfixOp[tqntr411:formula <- logicApplyQuant[qr411:forall, pr411:p1:point, tnotr4112:formula <- logicApplyUnary[ntr4112:not, tfrtr41113:formula <- prefixBinRel[frr41113:further, opr411113:origin, pr411123:p1:point]]], A4:and, rule5andrest:formula <- logicInfixOp[tqntr511:formula <- logicApplyQuant[qr511:forall, pr511:p1:point, tqntr5112:formula <- logicApplyQuant[qr5112:forall, pr5112:p2:point, timpr51113:formula <- logicInfixOp[tclrr511114:formula <- prefixBinRel[clr511114:closer, pr5111114:p1:point, pr5111124:p2:point], impr51113:implies, tnotr511124:formula <- logicApplyUnary[ntr511124:not, tclrr5111215:formula <- prefixBinRel[clr5111215:closer, pr51112115:p2:point, pr51112125:p1:point]]]]], A5:and, tqntr611:formula <- logicApplyQuant[qr611:forall, pr611:p1:point, tqntr6112:formula <- logicApplyQuant[qr6112:forall, pr6112:p2:point, tqntr61113:formula <- logicApplyQuant[qr61113:forall, pr61113:p3:point, timpr611114:formula <- logicInfixOp[tandr6111115:formula <- logicInfixOp[tawyr61111116:formula <- prefixTerRel[awyr61111116:away, pr611111116:p1:point, pr611111126:p2:point, pr611111136:p3:point], andr6111115:and, tnotr61111126:formula <- logicApplyUnary[ntr61111126:not, teqr611111217:formula <- infixBinRel[CPsr6111112118:p1:point, eqsr611111217:equals, oCPsr6111112128:origin]]], impr611114:implies, tandr6111125:formula <- logicInfixOp[tfrtr61111216:formula <- prefixBinRel[frr61111216:further, pr611112116:s3:point, pr611112126:s2:point], andr6111125:and, tfrtr61111226:formula <- prefixBinRel[frr61111226:further, pr611112216:s3:point, pr611112226:s1:point]]]]]]]]]]]
