import transferSchemas/measPath
import measStick

construction ruleAll:measStickG =ruleAll:rr:formula <- logicInfixOp[tqntr111:formula <- logicApplyQuant[qr111:forall, sr111:s1:seg, tqntr1112:formula <- logicApplyQuant[qr1112:forall, sr1112:s2:seg, teqvr11113:formula <- logicInfixOp[tlogr111114:formula <- prefixBinRel[lgr111114:longer, sr1111114:s1:seg, sr1111124:s2:seg], eqvr11113:equiv, tshrr111124:formula <- prefixBinRel[shr111124:shorter, sr1111214:s2:seg, sr1111224:s1:seg]]]], A1:and, rule2andrest:formula 
<- logicInfixOp[tqntr211:formula <- logicApplyQuant[qr211:forall, sr211:s1:seg, tqntr2112:formula <- logicApplyQuant[qr2112:forall, sr2112:s2:seg, tqntr21113:formula <- logicApplyQuant[qr21113:forall, sr21113:s3:seg, teqvr211114:formula <- logicInfixOp[textr2111115:formula <- prefixTerRel[exdr2111115:extend, sr21111115:s1:seg, sr21111125:s2:seg, sr21111135:s3:seg], eqvr211114:equiv, tchpr2111125:formula <- prefixTerRel[chpr2111125:chop, sr21111215:s3:seg, sr21111225:s2:seg, sr21111235:s1:seg]]]]], 
A2:and, rule3andrest:formula <- logicInfixOp[tqntr311:formula <- logicApplyQuant[qr311:forall, sr311:s1:seg, tqntr3112:formula <- logicApplyQuant[qr3112:forall, sr3112:s2:seg, timpr31113:formula <- logicInfixOp[tnotr311114:formula <- logicApplyUnary[ntr311114:not, tshrr3111115:formula <- prefixBinRel[shr3111115:shorter, sr31111115:s1:seg, sr31111125:s2:seg]], impr31113:implies, timpr311124:formula <- logicInfixOp[tnotr3111215:formula <- logicApplyUnary[ntr3111215:not, tlogr31112116:formula <- prefixBinRel[lgr31112116:longer, 
sr311121116:s2:seg, sr311121126:s1:seg]], impr311124:implies, teqr3111225:formula <- infixBinRel[CPsr31112216:s1:seg, eqsr3111225:equals, CPsr31112226:s2:seg]]]]], A3:and, rule4andrest:formula <- logicInfixOp[tqntr411:formula <- logicApplyQuant[qr411:forall, sr411:s1:seg, tnotr4112:formula <- logicApplyUnary[ntr4112:not, tlogr41113:formula <- prefixBinRel[lgr41113:longer, usr411113:unitSeg, sr411123:s1:seg]]], A4:and, rule5andrest:formula <- logicInfixOp[tqntr511:formula <- logicApplyQuant[qr511:forall, sr511:s1:seg, tqntr5112:formula 
<- logicApplyQuant[qr5112:forall, sr5112:s2:seg, timpr51113:formula <- logicInfixOp[tshrr511114:formula <- prefixBinRel[shr511114:shorter, sr5111114:s1:seg, sr5111124:s2:seg], impr51113:implies, tnotr511124:formula <- logicApplyUnary[ntr511124:not, tshrr5111215:formula <- prefixBinRel[shr5111215:shorter, sr51112115:s2:seg, sr51112125:s1:seg]]]]], A5:and, tqntr611:formula <- logicApplyQuant[qr611:forall, sr611:s1:seg, tqntr6112:formula <- logicApplyQuant[qr6112:forall, sr6112:s2:seg, tqntr61113:formula <- logicApplyQuant[qr61113:forall, 
sr61113:s3:seg, timpr611114:formula <- logicInfixOp[textr6111115:formula <- prefixTerRel[exdr6111115:extend, sr61111115:s1:seg, sr61111125:s2:seg, sr61111135:s3:seg], impr611114:implies, tandr6111125:formula <- logicInfixOp[tlogr61111216:formula <- prefixBinRel[lgr61111216:longer, sr611112116:s3:seg, sr611112126:s2:seg], andr6111125:and, tlogr61111226:formula <- prefixBinRel[lgr61111226:longer, sr611112216:s3:seg, sr611112226:s1:seg]]]]]]]]]]]

construction rule1:measStickG = t:rr:formula <- logicApplyQuant[qr111:forall, sr111:s1:seg, tqntr1112:formula <- logicApplyQuant[qr1112:forall, sr1112:s2:seg, teqvr11113:formula <- logicInfixOp[tlogr111114:formula <- prefixBinRel[lgr111114:longer, sr1111114:s1:seg, sr1111124:s2:seg], eqvr11113:equiv, tshrr111124:formula <- prefixBinRel[shr111124:shorter, sr1111214:s2:seg, sr1111224:s1:seg]]]]

construction rule4:measStickG = t:rr:formula <- logicApplyQuant[qr411:forall, sr411:s1:seg, tnotr4112:formula <- logicApplyUnary[ntr4112:not, tlogr41113:formula <- prefixBinRel[lgr41113:longer, usr411113:unitSeg, sr411123:s1:seg]]]

#transfer
#    sourceConstruction rule1
#    targetConSpec motionPathG
#    interConSpec interMeasPath
#    goal :metaTrue <- close[t:rr:formula, t':formula]
#    output Analogyrule1
#    matchTarget ttarget:formula <- logicInfixOp[tqntr111:formula <- logicApplyQuant[qr111:forall, pr111:p1:point, tqntr1112:formula <- logicApplyQuant[qr1112:forall, pr1112:s2:point, teqvr11113:formula <- logicInfixOp[tfrtr111114:formula <- prefixBinRel[frr111114:further, pr1111114:p1:point, pr1111124:p2:point], eqvr11113:equiv, tclrr111124:formula <- prefixBinRel[clr111124:closer, pr1111214:p2:point, pr1111224:p1:point]]]], A1:and, rule2andrest:formula <- logicInfixOp[tqntr211:formula <- logicApplyQuant[qr211:forall, pr211:p1:point, tqntr2112:formula <- logicApplyQuant[qr2112:forall, pr2112:p2:point, tqntr21113:formula <- logicApplyQuant[qr21113:forall, pr21113:p3:point, teqvr211114:formula <- logicInfixOp[tawyr2111115:formula <- prefixTerRel[awyr2111115:away, pr21111115:p1:point, pr21111125:p2:point, pr21111135:p3:point], eqvr211114:equiv, ttowr2111125:formula <- prefixTerRel[towr2111125:approach, pr21111215:p3:point, pr21111225:p2:point, pr21111235:p1:point]]]]], A2:and, rule3andrest:formula <- logicInfixOp[tqntr311:formula <- logicApplyQuant[qr311:forall, pr311:p1:point, tqntr3112:formula <- logicApplyQuant[qr3112:forall, pr3112:p2:point, torr31113:formula <- logicInfixOp[tclrr311114:formula <- prefixBinRel[clr311114:closer, pr3111114:p1:point, pr3111124:p2:point], oorr31113:origin, torr311124:formula <- logicInfixOp[tfrtr3111215:formula <- prefixBinRel[frr3111215:further, pr31112115:p1:point, pr31112125:p2:point], oorr311124:origin, teqr3111225:formula <- infixBinRel[CPsr31112216:p1:point, eqsr3111225:equals, CPsr31112226:p2:point]]]]], A3:and, rule4andrest:formula <- logicInfixOp[tqntr411:formula <- logicApplyQuant[qr411:forall, pr411:p1:point, tnotr4112:formula <- logicApplyUnary[ntr4112:not, tfrtr41113:formula <- prefixBinRel[frr41113:further, opr411113:origin, pr411123:p1:point]]], A4:and, rule5andrest:formula <- logicInfixOp[tqntr511:formula <- logicApplyQuant[qr511:forall, pr511:p1:point, tqntr5112:formula <- logicApplyQuant[qr5112:forall, pr5112:p2:point, timpr51113:formula <- logicInfixOp[tclrr511114:formula <- prefixBinRel[clr511114:closer, pr5111114:p1:point, pr5111124:p2:point], impr51113:implies, tnotr511124:formula <- logicApplyUnary[ntr511124:not, tclrr5111215:formula <- prefixBinRel[clr5111215:closer, pr51112115:p2:point, pr51112125:p1:point]]]]], A5:and, tqntr611:formula <- logicApplyQuant[qr611:forall, pr611:p1:point, tqntr6112:formula <- logicApplyQuant[qr6112:forall, pr6112:p2:point, tqntr61113:formula <- logicApplyQuant[qr61113:forall, pr61113:p3:point, timpr611114:formula <- logicInfixOp[tandr6111115:formula <- logicInfixOp[tawyr61111116:formula <- prefixTerRel[awyr61111116:away, pr611111116:p1:point, pr611111126:p2:point, pr611111136:p3:point], andr6111115:and, tnotr61111126:formula <- logicApplyUnary[ntr61111126:not, teqr611111217:formula <- infixBinRel[CPsr6111112118:p1:point, eqsr611111217:equals, oCPsr6111112128:origin]]], impr611114:implies, tandr6111125:formula <- logicInfixOp[tfrtr61111216:formula <- prefixBinRel[frr61111216:further, pr611112116:s3:point, pr611112126:s2:point], andr6111125:and, tfrtr61111226:formula <- prefixBinRel[frr61111226:further, pr611112216:s3:point, pr611112226:s1:point]]]]]]]]]]]

#transfer
#    sourceConstruction rule4
#    targetConSpec motionPathG
#    interConSpec interMeasPath
#    goal :metaTrue <- close[t:rr:formula, t':formula]
#    output Analogyrule4
#    matchTarget ttarget:formula <- logicInfixOp[tqntr111:formula <- logicApplyQuant[qr111:forall, pr111:p1:point, tqntr1112:formula <- logicApplyQuant[qr1112:forall, pr1112:s2:point, teqvr11113:formula <- logicInfixOp[tfrtr111114:formula <- prefixBinRel[frr111114:further, pr1111114:p1:point, pr1111124:p2:point], eqvr11113:equiv, tclrr111124:formula <- prefixBinRel[clr111124:closer, pr1111214:p2:point, pr1111224:p1:point]]]], A1:and, rule2andrest:formula <- logicInfixOp[tqntr211:formula <- logicApplyQuant[qr211:forall, pr211:p1:point, tqntr2112:formula <- logicApplyQuant[qr2112:forall, pr2112:p2:point, tqntr21113:formula <- logicApplyQuant[qr21113:forall, pr21113:p3:point, teqvr211114:formula <- logicInfixOp[tawyr2111115:formula <- prefixTerRel[awyr2111115:away, pr21111115:p1:point, pr21111125:p2:point, pr21111135:p3:point], eqvr211114:equiv, ttowr2111125:formula <- prefixTerRel[towr2111125:approach, pr21111215:p3:point, pr21111225:p2:point, pr21111235:p1:point]]]]], A2:and, rule3andrest:formula <- logicInfixOp[tqntr311:formula <- logicApplyQuant[qr311:forall, pr311:p1:point, tqntr3112:formula <- logicApplyQuant[qr3112:forall, pr3112:p2:point, torr31113:formula <- logicInfixOp[tclrr311114:formula <- prefixBinRel[clr311114:closer, pr3111114:p1:point, pr3111124:p2:point], oorr31113:origin, torr311124:formula <- logicInfixOp[tfrtr3111215:formula <- prefixBinRel[frr3111215:further, pr31112115:p1:point, pr31112125:p2:point], oorr311124:origin, teqr3111225:formula <- infixBinRel[CPsr31112216:p1:point, eqsr3111225:equals, CPsr31112226:p2:point]]]]], A3:and, rule4andrest:formula <- logicInfixOp[tqntr411:formula <- logicApplyQuant[qr411:forall, pr411:p1:point, tnotr4112:formula <- logicApplyUnary[ntr4112:not, tfrtr41113:formula <- prefixBinRel[frr41113:further, opr411113:origin, pr411123:p1:point]]], A4:and, rule5andrest:formula <- logicInfixOp[tqntr511:formula <- logicApplyQuant[qr511:forall, pr511:p1:point, tqntr5112:formula <- logicApplyQuant[qr5112:forall, pr5112:p2:point, timpr51113:formula <- logicInfixOp[tclrr511114:formula <- prefixBinRel[clr511114:closer, pr5111114:p1:point, pr5111124:p2:point], impr51113:implies, tnotr511124:formula <- logicApplyUnary[ntr511124:not, tclrr5111215:formula <- prefixBinRel[clr5111215:closer, pr51112115:p2:point, pr51112125:p1:point]]]]], A5:and, tqntr611:formula <- logicApplyQuant[qr611:forall, pr611:p1:point, tqntr6112:formula <- logicApplyQuant[qr6112:forall, pr6112:p2:point, tqntr61113:formula <- logicApplyQuant[qr61113:forall, pr61113:p3:point, timpr611114:formula <- logicInfixOp[tandr6111115:formula <- logicInfixOp[tawyr61111116:formula <- prefixTerRel[awyr61111116:away, pr611111116:p1:point, pr611111126:p2:point, pr611111136:p3:point], andr6111115:and, tnotr61111126:formula <- logicApplyUnary[ntr61111126:not, teqr611111217:formula <- infixBinRel[CPsr6111112118:p1:point, eqsr611111217:equals, oCPsr6111112128:origin]]], impr611114:implies, tandr6111125:formula <- logicInfixOp[tfrtr61111216:formula <- prefixBinRel[frr61111216:further, pr611112116:s3:point, pr611112126:s2:point], andr6111125:and, tfrtr61111226:formula <- prefixBinRel[frr61111226:further, pr611112216:s3:point, pr611112226:s1:point]]]]]]]]]]]

transfer
    sourceConstruction ruleAll
    targetConSpec motionPathG
    interConSpec interMeasPath
    goal :metaTrue <- close[ruleAll:rr:formula, t':formula]
   output measPathAnalogy
    limit 100
    matchTarget ttarget:formula <- logicInfixOp[tqntr111:formula <- logicApplyQuant[qr111:forall, pr111:p1:point, tqntr1112:formula <- logicApplyQuant[qr1112:forall, pr1112:s2:point, teqvr11113:formula <- logicInfixOp[tfrtr111114:formula <- prefixBinRel[frr111114:further, pr1111114:p1:point, pr1111124:p2:point], eqvr11113:equiv, tclrr111124:formula <- prefixBinRel[clr111124:closer, pr1111214:p2:point, pr1111224:p1:point]]]], A1:and, rule2andrest:formula <- logicInfixOp[tqntr211:formula <- logicApplyQuant[qr211:forall, pr211:p1:point, tqntr2112:formula <- logicApplyQuant[qr2112:forall, pr2112:p2:point, tqntr21113:formula <- logicApplyQuant[qr21113:forall, pr21113:p3:point, teqvr211114:formula <- logicInfixOp[tawyr2111115:formula <- prefixTerRel[awyr2111115:away, pr21111115:p1:point, pr21111125:p2:point, pr21111135:p3:point], eqvr211114:equiv, ttowr2111125:formula <- prefixTerRel[towr2111125:approach, pr21111215:p3:point, pr21111225:p2:point, pr21111235:p1:point]]]]], A2:and, rule3andrest:formula <- logicInfixOp[tqntr311:formula <- logicApplyQuant[qr311:forall, pr311:p1:point, tqntr3112:formula <- logicApplyQuant[qr3112:forall, pr3112:p2:point, torr31113:formula <- logicInfixOp[tclrr311114:formula <- prefixBinRel[clr311114:closer, pr3111114:p1:point, pr3111124:p2:point], oorr31113:or, torr311124:formula <- logicInfixOp[tfrtr3111215:formula <- prefixBinRel[frr3111215:further, pr31112115:p1:point, pr31112125:p2:point], oorr311124:or, teqr3111225:formula <- infixBinRel[CPsr31112216:p1:point, eqsr3111225:equals, CPsr31112226:p2:point]]]]], A3:and, rule4andrest:formula <- logicInfixOp[tqntr411:formula <- logicApplyQuant[qr411:forall, pr411:p1:point, tnotr4112:formula <- logicApplyUnary[ntr4112:not, tfrtr41113:formula <- prefixBinRel[frr41113:further, opr411113:origin, pr411123:p1:point]]], A4:and, rule5andrest:formula <- logicInfixOp[tqntr511:formula <- logicApplyQuant[qr511:forall, pr511:p1:point, tqntr5112:formula <- logicApplyQuant[qr5112:forall, pr5112:p2:point, timpr51113:formula <- logicInfixOp[tclrr511114:formula <- prefixBinRel[clr511114:closer, pr5111114:p1:point, pr5111124:p2:point], impr51113:implies, tnotr511124:formula <- logicApplyUnary[ntr511124:not, tclrr5111215:formula <- prefixBinRel[clr5111215:closer, pr51112115:p2:point, pr51112125:p1:point]]]]], A5:and, tqntr611:formula <- logicApplyQuant[qr611:forall, pr611:p1:point, tqntr6112:formula <- logicApplyQuant[qr6112:forall, pr6112:p2:point, tqntr61113:formula <- logicApplyQuant[qr61113:forall, pr61113:p3:point, timpr611114:formula <- logicInfixOp[tandr6111115:formula <- logicInfixOp[tawyr61111116:formula <- prefixTerRel[awyr61111116:away, pr611111116:p1:point, pr611111126:p2:point, pr611111136:p3:point], andr6111115:and, tnotr61111126:formula <- logicApplyUnary[ntr61111126:not, teqr611111217:formula <- infixBinRel[CPsr6111112118:p1:point, eqsr611111217:equals, oCPsr6111112128:origin]]], impr611114:implies, tandr6111125:formula <- logicInfixOp[tfrtr61111216:formula <- prefixBinRel[frr61111216:further, pr611112116:s3:point, pr611112126:s2:point], andr6111125:and, tfrtr61111226:formula <- prefixBinRel[frr61111226:further, pr611112216:s3:point, pr611112226:s1:point]]]]]]]]]]]
